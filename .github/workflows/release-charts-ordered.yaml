name: Release charts (library first, then apps)

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: [ "Remotely-triggered chart bump & commit" ]
    branches:   [ main ]
    types: [ completed ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  GH_PAGES_URL: https://bcit-ltc.github.io/helm-charts
  LIB_NAME: apps-common
  CHARTS_DIR: charts

jobs:
  # 1) Package and release ONLY the library chart to gh-pages first
  release-lib:
    name: Release library chart
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run chart-releaser for library
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: charts/apps-common   # only the library folder
          skip_existing: true              # do not fail if the release tag already exists
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 2) Package and release ALL charts (apps) — now that the lib is indexed
  release-apps:
    name: Release app charts
    needs: release-lib
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Helm needed for dep build and packaging
      - uses: azure/setup-helm@v4
        with: { version: v3.14.4 }

      # Add gh-pages repo so deps resolve
      - name: Add chart repos for dependencies
        run: |
          set -euo pipefail
          helm repo add bcit-ltc https://bcit-ltc.github.io/helm-charts || true
          helm repo update

      # Install yq for parsing Chart.yaml
      - uses: mikefarah/yq@v4.44.3

      # Pre-vendor library deps (apps-common) into each app's charts/ dir
      - name: Pre-vendor library dependencies (apps-common)
        run: |
          set -euo pipefail
          for d in charts/*; do
            [[ -f "$d/Chart.yaml" ]] || continue
            [[ "$(basename "$d")" == "apps-common" ]] && continue
            if yq -e '.dependencies[] | select(.name=="apps-common")' "$d/Chart.yaml" > /dev/null 2>&1; then
              ver="$(yq -r '.dependencies[] | select(.name=="apps-common") | .version' "$d/Chart.yaml")"
              echo "==> Vendoring apps-common@$ver into $d/charts/"
              mkdir -p "$d/charts"
              helm pull bcit-ltc/apps-common --version "$ver" --untar --untardir "$d/charts"
              ls -la "$d/charts" || true
            fi
          done

      # (Optional) Build deps for any other non-library repos you might depend on
      - name: Build chart dependencies (apps)
        run: |
          set -euo pipefail
          for d in charts/*; do
            [[ -f "$d/Chart.yaml" ]] || continue
            [[ "$(basename "$d")" == "apps-common" ]] && continue
            echo "==> helm dependency build $d"
            helm dependency build "$d"
          done

      # Package app charts ourselves (pre-package) so CR only uploads/indexes
      - name: Package app charts (pre-package)
        run: |
          set -euo pipefail
          mkdir -p .cr-release-packages
          for d in charts/*; do
            [[ -f "$d/Chart.yaml" ]] || continue
            [[ "$(basename "$d")" == "apps-common" ]] && continue
            echo "==> helm package $d -d .cr-release-packages"
            helm package "$d" -d .cr-release-packages
          done
          ls -la .cr-release-packages

      # Install the chart-releaser CLI only (avoid action's packaging/index bug)
      - name: Install chart-releaser CLI
        uses: helm/chart-releaser-action@v1.6.0
        with:
          install_only: true
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload prebuilt packages and push gh-pages index
      - name: Upload packages & update index (manual cr)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Upload all .tgz from .cr-release-packages to GitHub Releases (idempotent)
          cr upload \
            --owner "${GITHUB_REPOSITORY_OWNER}" \
            --git-repo "${GITHUB_REPOSITORY#*/}" \
            --skip-existing \
            --token "${GH_TOKEN}"

          # Rebuild and push gh-pages index from releases
          cr index \
            --owner "${GITHUB_REPOSITORY_OWNER}" \
            --git-repo "${GITHUB_REPOSITORY#*/}" \
            --charts-repo "https://bcit-ltc.github.io/helm-charts" \
            --pages-branch "gh-pages" \
            --push \
            --token "${GH_TOKEN}"



  # 3) Publish packaged charts to GHCR
  publish-oci:
    name: Publish OCI charts to GHCR
    needs: release-apps
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: azure/setup-helm@v4
        with: { version: v3.14.4 }

      - name: Login to GHCR (Helm)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io \
            -u "${{ github.actor }}" --password-stdin

      - name: Login to GHCR (Cosign)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather packaged chart assets from releases
        id: tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p dist

          # Download .tgz assets from recent releases (broad net; harmless if no new packages)
          mapfile -t rels < <(gh release list --limit 30 --json name | jq -r '.[].name')
          for r in "${rels[@]}"; do
            gh release download "$r" --pattern '*.tgz' --dir dist || true
          done

          shopt -s nullglob
          files=(dist/*.tgz)
          if (( ${#files[@]} )); then
            tags=$(printf '%s\n' "${files[@]}" | sed -E 's,.*/(.*)\.tgz$,\1,' | jq -R . | jq -sc .)
          else
            tags="[]"
          fi
          echo "list=$tags" >> "$GITHUB_OUTPUT"
          echo "Packaged tags: $tags"

      - uses: sigstore/cosign-installer@v3

      - uses: imjasonh/setup-crane@v0.4
        with: { version: v0.20.1 }

      - name: Push & sign charts to GHCR by digest
        if: ${{ steps.tags.outputs.list != '' && steps.tags.outputs.list != '[]' }}
        env:
          OWNER: ${{ github.repository_owner }}
          LIB_NAME: ${{ env.LIB_NAME }}
        run: |
          set -euo pipefail
          repo="oci://ghcr.io/${OWNER}/oci"

          # Sanitize workflow name for Cosign annotation (alnum + . _ - only)
          WORKFLOW_SAFE="$(printf '%s' "${GITHUB_WORKFLOW:-}" | tr -c '[:alnum:]._-' '_')"

          for pkg in dist/*.tgz; do
            name="$(helm show chart "$pkg" | awk -F': ' '/^name:/{print $2; exit}')"
            version="$(helm show chart "$pkg" | awk -F': ' '/^version:/{print $2; exit}')"

            # Skip pushing the library chart to OCI (optional)
            if [[ "$name" == "${LIB_NAME}" ]]; then
              echo "Skipping OCI publish for library chart: $name"
              continue
            fi

            PUSH_OUT="$(helm push "$pkg" "${repo}" 2>&1 | tee /dev/stderr)"
            DGST="$(printf '%s\n' "$PUSH_OUT" | tr -d '\r' | awk 'tolower($1)=="digest:" {print $2; exit}')"
            [[ -n "$DGST" && "$DGST" =~ ^sha256:[0-9A-Fa-f]{64}$ ]] || { echo "Failed to parse digest"; exit 1; }

            REF="ghcr.io/${OWNER}/oci/${name}"
            echo "Signing ${REF}@${DGST} with Cosign (keyless)…"
            cosign sign --yes \
              -a "chart.name=${name}" \
              -a "chart.version=${version}" \
              -a "repo=${GITHUB_REPOSITORY}" \
              -a "workflow=${WORKFLOW_SAFE}" \
              -a "sha=${GITHUB_SHA}" \
              "${REF}@${DGST}"

            # Add 'latest' tag
            crane tag "${REF}@${DGST}" latest
          done
