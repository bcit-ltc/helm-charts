name: Update, release, and publish Helm charts

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional: release tag to publish (skip detection)'
        required: false

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Run chart-releaser
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.release_tag.outputs.tag }}   # publish reads this
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # Robust: derive the tag from what was actually packaged (e.g., app-0.2.0)
      - name: Detect packaged chart tag
        id: release_tag
        run: |
          shopt -s nullglob
          FILES=(.cr-release-packages/*.tgz)
          if (( ${#FILES[@]} )); then
            BASE=$(basename "${FILES[0]}")
            TAG="${BASE%.tgz}"
            echo "tag=$TAG" >> "$GITHUB_OUTPUT"
            echo "Packaged tag: $TAG"
          else
            echo "tag=" >> "$GITHUB_OUTPUT"
            echo "No packaged charts in this run."
          fi

  publish:
    name: Publish OCI charts to GHCR (if a release exists)
    needs: release
    # Skip the entire job unless a manual tag is provided OR something was packaged
    if: ${{ (github.event_name == 'workflow_dispatch' && inputs.tag != '') || needs.release.outputs.new_tag != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Resolve tag (manual input or packaged)
        id: tag
        run: |
          if [[ -n "${{ github.event_name == 'workflow_dispatch' && inputs.tag || '' }}" ]]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${{ needs.release.outputs.new_tag }}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Publishing tag: ${TAG}"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Login to GHCR (password-stdin)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${GH_TOKEN}" | helm registry login ghcr.io \
            -u "${{ github.actor }}" \
            --password-stdin

      - name: Check release has *.tgz assets
        id: have_assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          COUNT=$(gh release view "${{ steps.tag.outputs.tag }}" --repo "${{ github.repository }}" \
            --json assets --jq '.assets | map(select(.name | test("\\.tgz$"))) | length' || echo 0)
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          if [[ "$COUNT" -eq 0 ]]; then
            echo "Release has no .tgz assets; skipping."
          fi

      - name: Download chart assets for the tag
        if: ${{ steps.have_assets.outputs.count != '0' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p dist
          gh release download "${{ steps.tag.outputs.tag }}" \
            --repo "${{ github.repository }}" \
            --pattern '*.tgz' \
            --dir dist

      - name: Delete existing tag (if any) and push OCI chart(s)
        if: ${{ steps.have_assets.outputs.count != '0' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail
          shopt -s nullglob

          for pkg in dist/*.tgz; do
            # Read chart metadata from the package
            name="$(helm show chart "$pkg" | awk -F': ' '/^name:/{print $2; exit}')"
            version="$(helm show chart "$pkg" | awk -F': ' '/^version:/{print $2; exit}')"

            # GHCR package name is the repo path after ghcr.io: "oci/<chart-name>"
            package_name="oci%2F${name}"   # URL-encoded "oci/<name>"

            echo "Checking GHCR for existing ${name}:${version}…"
            # Find any matching version IDs by tag
            ids=$(gh api --paginate \
              "/orgs/${OWNER}/packages/container/${package_name}/versions?per_page=100" \
              --jq ".[] | select(.metadata.container.tags[]? == \"${version}\") | .id" || true)

            if [[ -n "${ids}" ]]; then
              echo "Found existing tag(s) for ${name}:${version}:"
              echo "${ids}" | sed 's/^/  id: /'
              # Delete all matches (defensive)
              while IFS= read -r id; do
                [[ -z "$id" ]] && continue
                echo "Deleting version id ${id}…"
                gh api -X DELETE "/orgs/${OWNER}/packages/container/${package_name}/versions/${id}"
              done <<< "${ids}"
              echo "Deleted existing ${name}:${version} from GHCR."
            else
              echo "No existing ${name}:${version} in GHCR."
            fi

            # Push the package after ensuring no conflicting tag exists
            ref="oci://ghcr.io/${OWNER}/oci/${name}"
            echo "Pushing $pkg to ${ref}…"
            helm push "$pkg" "${ref}"
          done

      - name: Show pushed package name(s)
        if: ${{ steps.have_assets.outputs.count != '0' }}
        run: |
          for pkg in dist/*.tgz; do
            echo "Published: $pkg → ghcr.io/${{ github.repository_owner }}/oci"
          done
