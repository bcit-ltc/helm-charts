name: Update chart index and publish OCI Helm charts

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: [ "Remote bump & publish" ]  # fires when remote-bump finishes
    branches:   [ main ]
    types: [ completed ]

# Prevent runs from colliding across pushes to main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  # Package changed charts and create GitHub Releases with .tgz assets
  chart-index-updater:
    name: Chart index updater
    runs-on: ubuntu-latest
    outputs:
      tags_json: ${{ steps.tags.outputs.list }}   # e.g., ["app-0.2.0","nginx-unprivileged-1.3.4"]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure Git
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Collect ALL packaged tags from .cr-release-packages/*.tgz
      - name: Detect packaged chart tags
        id: tags
        run: |
          shopt -s nullglob
          files=(.cr-release-packages/*.tgz)
          if (( ${#files[@]} )); then
            tags=$(printf '%s\n' "${files[@]}" | sed -E 's,.*/(.*)\.tgz$,\1,' | jq -R . | jq -sc .)
          else
            tags="[]"
          fi
          echo "list=$tags" >> "$GITHUB_OUTPUT"
          echo "Packaged tags: $tags"

  # Publish all packaged charts from this run (matrix over tags)
  publish-charts:
    name: Publish OCI charts to GHCR
    needs: chart-index-updater
    if: ${{ needs.chart-index-updater.outputs.tags_json != '' && needs.chart-index-updater.outputs.tags_json != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ${{ fromJson(needs.chart-index-updater.outputs.tags_json) }}
    steps:
      - uses: azure/setup-helm@v4
        with: { version: v3.14.4 }

      - name: Login to GHCR (password-stdin)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${GH_TOKEN}" | helm registry login ghcr.io \
            -u "${{ github.actor }}" \
            --password-stdin

      - name: Download chart assets for tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p dist
          gh release download "${{ matrix.tag }}" \
            --repo "${{ github.repository }}" \
            --pattern '*.tgz' \
            --dir dist

      - name: Push chart OCI package(s) to GHCR (skip if exists)
        env:
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          for pkg in dist/*.tgz; do
            name="$(helm show chart "$pkg" | awk -F': ' '/^name:/{print $2; exit}')"
            version="$(helm show chart "$pkg" | awk -F': ' '/^version:/{print $2; exit}')"
            ref="oci://ghcr.io/${OWNER}/oci"
            if helm show chart "${ref}" --version "${version}" >/dev/null 2>&1; then
              echo "Already exists: ${ref}:${version} — skipping push."
            else
              echo "Pushing $pkg to ${ref}…"
              helm push "$pkg" "${ref}"
            fi
          done
