name: Remotely-triggered chart bump & commit

on:
  workflow_dispatch:
    inputs:
      chart_name:
        description: Chart directory under charts/
        required: true
        type: string
      version:
        description: New version (Chart.version, Chart.appVersion, values.image.tag)
        required: true
        type: string

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ inputs.chart_name }}
  cancel-in-progress: true

jobs:
  bump:
    name: Bump ${{ inputs.chart_name }} to ${{ inputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: mikefarah/yq@v4.44.3

      - name: Validate input
        run: |
          [[ "${{ inputs.chart_name }}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]] || { echo "Invalid chart_name" >&2; exit 1; }

      - name: Update files
        id: update
        env:
          CHART_DIR: charts/${{ inputs.chart_name }}
          APP_VERSION: ${{ inputs.version }}
        run: |
          set -euo pipefail

          VALUES="$CHART_DIR/values.yaml"
          CHART="$CHART_DIR/Chart.yaml"

          # Must have Chart.yaml
          [[ -f "$CHART" ]] || { echo "Chart not found at $CHART_DIR" >&2; echo "changed=false" >> "$GITHUB_OUTPUT"; exit 0; }

          # Ensure Chart.yaml has the required keys (treat empty as error)
          yq -e '.version        | select(type=="string" and length>0)' "$CHART" > /dev/null
          yq -e '.appVersion     | select(type=="string" and length>0)' "$CHART" > /dev/null

          # 1) Always bump chart versions
          yq -i '.version = strenv(APP_VERSION) | .appVersion = strenv(APP_VERSION)' "$CHART"

          # 2) Optionally bump values.yaml image tag (only if values.yaml exists and looks like an app)
          if [[ -f "$VALUES" ]]; then
            # Detect whether this chart uses frontend/processor images (so we don’t mutate library-only charts)
            HAS_FRONTEND_REPO="$(yq -r '(.frontend.image.repository // "") != ""' "$VALUES")"
            HAS_PROCESSOR_REPO="$(yq -r '(.processor.image.repository // "") != ""' "$VALUES")"

            if [[ "$HAS_FRONTEND_REPO" == "true" || "$HAS_PROCESSOR_REPO" == "true" ]]; then
              # Read processor.enabled with a safe default (false if missing)
              PROC_ENABLED="$(yq -r '(.processor.enabled // false) | (if . then "true" else "false" end)' "$VALUES")"

              if [[ "$PROC_ENABLED" == "true" ]]; then
                echo "Processor enabled — setting .processor.image.tag to ${APP_VERSION}"
                yq -i '
                  .processor       = (.processor       // {}) |
                  .processor.image = (.processor.image // {}) |
                  .processor.image.tag = strenv(APP_VERSION)
                ' "$VALUES"
              else
                echo "Processor disabled — setting .frontend.image.tag to ${APP_VERSION}"
                yq -i '
                  .frontend       = (.frontend       // {}) |
                  .frontend.image = (.frontend.image // {}) |
                  .frontend.image.tag = strenv(APP_VERSION)
                ' "$VALUES"
              fi
            else
              echo "No frontend/processor image repository configured; skipping values.yaml tag bump."
            fi
          else
            echo "No values.yaml; only Chart.yaml bumped."
          fi

          # Output "changed" if anything changed
          if git status --porcelain | grep -q .; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit & push
        if: steps.update.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore(${{ inputs.chart_name }}): bump chart/app to ${{ inputs.version }}"
          git push
